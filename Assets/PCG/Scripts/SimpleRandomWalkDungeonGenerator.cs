using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Random = UnityEngine.Random;

/// <summary>
/// Generates a dungeon layout using a simple random walk algorithm.
/// Inherits from AbstractDungeonGenerator and overrides procedural generation behavior.
/// </summary>
public class SimpleRandomWalkDungeonGenerator : AbstractDungeonGenerator
{

    [SerializeField]
    protected SimpleRandomWalkSO randomWalkParameters;

    /// <summary>
    /// Runs the procedural generation process by calling the random walk algorithm
    /// and visualizing the dungeon layout. 
    /// It generates floor positions, clears the tilemap, and paints floor and wall tiles.
    /// </summary>
    protected override void RunProceduralGeneration()
    {
        HashSet<Vector2Int> floorPositions = RunRandomWalk(randomWalkParameters, startPosition);
        tilemapVisualizer.Clear();
        tilemapVisualizer.PaintFloorTiles(floorPositions);
        WallGenerator.CreateWalls(floorPositions, tilemapVisualizer);
    }


    /// <summary>
    /// Performs a random walk based on the specified parameters. It generates a set of floor positions 
    /// by executing a random walk algorithm a specified number of iterations.
    /// </summary>
    /// <param name="parameters">Parameters controlling the random walk behavior (iterations, walk length, etc.)</param>
    /// <param name="position">The starting position for the random walk</param>
    /// <returns>A set of floor positions generated by the random walk</returns>
    protected HashSet<Vector2Int> RunRandomWalk(SimpleRandomWalkSO parameters, Vector2Int position)
    {
        var currentPosition = position;
        HashSet<Vector2Int> floorPositions = new HashSet<Vector2Int>();
        for (int i = 0; i < parameters.iterations; i++)
        {
            var path = ProceduralGenerationAlgorithms.SimpleRandomWalk(currentPosition, parameters.walkLength);
            floorPositions.UnionWith(path);
            if (parameters.startRandomlyEachIteration)
                currentPosition = floorPositions.ElementAt(Random.Range(0, floorPositions.Count));
        }
        return floorPositions;
    }

}